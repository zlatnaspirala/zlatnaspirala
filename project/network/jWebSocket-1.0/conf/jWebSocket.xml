<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : jWebSocket.xml
	Created on : March 18, 2010, 10:24 AM
	Author     : aschulze, puran
	Description: Configuration of the jWebSocket Server.
	This includes engines, servers, plug-ins, filter, rights, roles and users 
	as well as logging.
-->

<!-- jWebSocket server configuration -->
<jWebSocket>
	<!--
		define the protocol, default protocol if not specified is 'json'
		possible values are [json|xml|csv]
	-->
	<protocol>json</protocol>

	<!--
		the unique ID of this instance within a jWebSocket cluster
		can be left empty to run just a single stand-alone server
		Preparation for pending cluster-plug-in
	-->
	<node_id>01</node_id>

	<!-- Auto load required external libraries -->
	<!--
		Important!
		If you use folder references by the environment variable 
		${JWEBSOCKET_HOME} please consider that the value of this variable
		contains a trailing [back]slash. So DO NOT add a slash AFTER this 
		variable!
		*INVALID* example: <url>${JWEBSOCKET_HOME}/libs/<your_jar>.jar</url>
		CORRECT example: <url>${JWEBSOCKET_HOME}libs/<your_jar>.jar</url>
	-->
	<libraries>
		<!--
		<library>
			<id>Description of third party .jar to be loaded by jWebSocket</id>
			<url>/etc/myjars/test.jar</url>
			<description>Description of third party .jar to be loaded by jWebSocket</description>
		</library>
		-->
		<!--
		<library>
			<id>OracleJDBCDriver</id>
			<url>C:\Program Files\Oracle\ojdbc14-10.2.0.4.jar</url>
			<description>Oracle JDBC Driver 10.2.0.4 ro access Oracle SQL Databases from jWebSocket</description>
		</library>
		-->
		
		<!-- Jasper Reports required for Reporting plug-in -->
		<!--
		<library>
			<id>Jasper Reports</id>
			<url>${JWEBSOCKET_HOME}libs/jasperreports-4.5.0.jar</url>
			<description>Jasper Reports for reporting tools</description>
		</library>
		<library>
			<id>Jasper Reports Fonts</id>
			<url>${JWEBSOCKET_HOME}libs/jasperreports-fonts-4.0.0.jar</url>
			<description>Jasper Reports Fonts for reporting tools</description>
		</library>
		-->
	</libraries>

	<!-- jWebSocket logging configuration -->
	<logging>
		<log4j>
			<!-- automatic reload of log config options in ms (0 for none, minimum 5000ms) -->
			<autoreload>20000</autoreload>
		</log4j>
	</logging>

	<!--
		 Engines used for jWebSocket. CAUTION!
		 Up to version 1.0 beta 7 only the first engine was loaded.
		 From version 1.0 beta 8 ALL engines are loaded. So be aware of 
		 configuring individual ports per engine!
	-->
	<!-- jWebSocket engine configuration -->
	<engines>
		<!-- TCP Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tcp.TCPEngine</name>
			<id>tcp0</id>
			<jar>jWebSocketTCPEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- keystore file with in ${JWEBSOCKET_HOME}conf -->
			<keystore>${JWEBSOCKET_HOME}conf/jWebSocket.ks</keystore>
			<!-- password to access keystore file -->
			<password>jWebSocket</password>
			<!-- CAUTION! -->
			<!-- not all browsers automatically accept self-signed certificates -->
			<!-- please follow instructions on the jWebSocket.org website, how
			     to trust self-signed certificates for the various browsers or
				 how to import signed private key/certificate bundles into the keystore -->

			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<!-- you optionally can add asterisks as wild cards -->
			<domains>
				<domain>http*://jwebsocket.org</domain>
				<domain>http*://jwebsocket.com</domain>
				<domain>http*://*.jwebsocket.org</domain>
				<domain>http*://*.jwebsocket.com</domain>
				<domain>http*://10.10.*</domain>
				<domain>http*://10.21.*</domain>
				<domain>http*://192.168.*</domain>
				<domain>http*://localhost*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
			
			<!-- on max connections reached strategy -->
			<!-- wait, close, reject, redirect --> 
			<onmaxconnections>reject</onmaxconnections>
		</engine>

	</engines>	
		
	<!-- The <engineDefaults> section is stored here only for convenience!
		 To use a certain engine move the engine configuration from here to
		 the <engines> section.
	-->
	<engineDefaults>
		<!-- TCP Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tcp.TCPEngine</name>
			<id>tcp0</id>
			<jar>jWebSocketTCPEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- keystore file with in ${JWEBSOCKET_HOME}conf -->
			<keystore>${JWEBSOCKET_HOME}conf/jWebSocket.ks</keystore>
			<!-- password to access keystore file -->
			<password>jWebSocket</password>
			<!-- CAUTION! -->
			<!-- not all browsers automatically accept self-signed certificates -->
			<!-- please follow instructions on the jWebSocket.org website, how
			     to trust self-signed certificates for the various browsers or
				 how to import signed private key/certificate bundles into the keystore -->

			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<!-- you optionally can add asterisks as wild cards -->
			<domains>
				<domain>http*://jwebsocket.org</domain>
				<domain>http*://jwebsocket.com</domain>
				<domain>http*://*.jwebsocket.org</domain>
				<domain>http*://*.jwebsocket.com</domain>
				<domain>http*://10.10.*</domain>
				<domain>http*://10.21.*</domain>
				<domain>http*://192.168.*</domain>
				<domain>http*://localhost*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
			
			<!-- on max connections reached strategy -->
			<!-- wait, close, reject, redirect --> 
			<onmaxconnections>reject</onmaxconnections>
		</engine>

		<!-- Tomcat Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tomcat.TomcatEngine</name>
			<id>tomcat0</id>
			<jar>jWebSocketTomcatEngine-1.0.jar</jar>
			<!-- The jWebSocket TomcatEngine can either work in embedded mode 
				 or in standard web app mode. In standard wep app mode the 
				 jWebSocket Tomcat engine listens on same port like
				 Tomcats's http. The http protocol is upgraded to use WebSockets.
				 The http/websocket port can be configured via the Tomcat
				 configuration in the server.xml configuration file.
			-->
			<!-- set both port settings to "0" (null) if running Tomcat
				 Servlet Container for Web Apps and embed jWebSocket library.
				 This uses the settings from server.xml, wraps the existing
				 Tomcat WebSocket servlet and does NOT instantiate a separate
				 embedded engine at run time within jWebSocket.
			-->
			<!--
			<port>0</port>
			<sslport>0</sslport>
			-->
			<!-- use 80/443 for default http/ws or https/wss connections
				 when running a jWebSocket Server and use Tomcat as an embedded 
				 engine. These settings are recommended only when running 
				 jWebSocket on a SEPARATE server beside a WebServer and the 
				 firewall does not allow access to ports 8787 and 9797.
			-->
			<!--
			<port>80</port>
			<sslport>443</sslport>
			-->
			<!-- use 8787/9797 for default http/ws or https/wss connections
				 These settings are recommended only when running jWebSocket
				 on the same server beside a Tomcat WebServer and the firewall
				 grants access to ports 8787 and 9797.
			-->
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- these domains are accepted by the engine listening
				 on the above mentioned port -->
			<domains>
				<domain>*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>60000</timeout>

			<!-- context and servlet settings, these settings are applied only
				 in embedded mode. In standard web app mode the context is specified 
				 by the context.xml of the web-app and the servlet is specified 
				 in the web.xml of the web-app. -->
			<!-- Tomcat provides a WebSocket Servlet, set the context path here -->
			<context>/jWebSocket</context>
			<!-- Tomcat provides a WebSocket Servlet, set the servlet path here -->
			<servlet>/jWebSocket</servlet>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
		</engine>
		
		<!-- NIO Engine Configuration -->
		<engine>
			<name>org.jwebsocket.tcp.nio.NioTcpEngine</name>
			<id>nio0</id>
			<jar>jWebSocketNIOEngine-1.0.jar</jar>
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- keystore file with in %JWEBSOCKET_HOME%/conf -->
			<!-- CAUTION! -->
			<!-- not all browsers automatically accept self-signed certificates -->
			<!-- please follow instructions on the jWebSocket.org website, how
			     to trust self-signed certificates for the various browsers or
				 how to import signed private key/certificate bundles into the keystore -->
			<keystore>jWebSocket.ks</keystore>
			<!-- password to access keystore file -->
			<password>jWebSocket</password>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>http*://jwebsocket.org</domain>
				<domain>http*://jwebsocket.com</domain>
				<domain>http*://*.jwebsocket.org</domain>
				<domain>http*://*.jwebsocket.com</domain>
				<domain>http*://10.10.*</domain>
				<domain>http*://10.21.*</domain>
				<domain>http*://192.168.*</domain>
				<domain>http*://localhost*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
			<settings>
				<setting key="workers">500</setting>
			</settings>			
		</engine>

		<!-- Jetty Engine Configuration -->
		<engine>
			<name>org.jwebsocket.jetty.JettyEngine</name>
			<id>jetty0</id>
			<jar>jWebSocketJettyEngine-1.0.jar</jar>
			<!-- Attention! The jWebSocket JettyEngine listens on same port like
				 Jetty's http. The http protocol is upgraded to use WebSockets.
				 The http/websocket port can be configured via the Jetty
				 configuration in the jetty.xml configuration file.
			-->
			<!-- set both port settings to "0" (null) if running Jetty
				 Servlet Container for Web Apps and embed jWebSocket library.
				 This uses the settings from jetty.xml, wraps the existing
				 Jetty WebSocket servlet and does not instantiate a separate
				 engine at run time within jWebSocket.
			-->
			<!--
			<port>0</port>
			<sslport>0</sslport>
			-->
			<!-- use 80/443 for default http/ws or https/wss connections
				 when running a jWebSocket Server and use Jetty as an engine.
				 These settings are recommended only when running jWebSocket
				 on a separate server beside a WebServer and the firewall
				 does not allow access to ports 8787 and 9797.
			-->
			<!--
			<port>80</port>
			<sslport>443</sslport>
			-->
			<!-- use 8787/9797 for default http/ws or https/wss connections
				 These settings are recommended only when running jWebSocket
				 on the same server beside a WebServer and the firewall
				 grants access to ports 8787 and 9797.
			-->
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>http*://jwebsocket.org</domain>
				<domain>http*://jwebsocket.com</domain>
				<domain>http*://10.10.*</domain>
				<domain>http*://10.21.*</domain>
				<domain>http*://192.168.*</domain>
				<domain>http*://www.jwebsocket.org</domain>
				<domain>http*://www.jwebsocket.com</domain>
				<domain>http*://localhost*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!-- Jetty provides a WebSocket Servlet, set the context path here -->
			<context>/jWebSocket</context>
			<!-- Jetty provides a WebSocket Servlet, set the servlet path here -->
			<servlet>/jWebSocket</servlet>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
		</engine>

		<!-- Grizzly Engine Configuration -->
		<engine>
			<name>org.jwebsocket.grizzly.GrizzlyEngine</name>
			<id>grizzly0</id>
			<jar>jWebSocketGrizzlyEngine-1.0.jar</jar>
			<!-- Attention! The jWebSocket Grizzly Engine listens on same port like
				 Grizzly's http. The http protocol is upgraded to use WebSockets.
				 The http/websocket port can be configured via the Grizzly
				 configuration file.
			-->
			<!-- set both port settings to "0" (null) if running Jetty
				 Servlet Container for Web Apps and embed jWebSocket library.
				 This uses the settings from jetty.xml, wraps the existing
				 Jetty WebSocket servlet and does not instantiate a separate
				 engine at run time within jWebSocket.
			-->
			<!--
			<port>0</port>
			<sslport>0</sslport>
			-->
			<!-- use 80/443 for default http/ws or https/wss connections
				 when running a jWebSocket Server and use Jetty as an engine.
				 These settings are recommended only when running jWebSocket
				 on a separate server beside a WebServer and the firewall
				 does not allow access to ports 8787 and 9797.
			-->
			<!--
			<port>80</port>
			<sslport>443</sslport>
			-->
			<!-- use 8787/9797 for default http/ws or https/wss connections
				 These settings are recommended only when running jWebSocket
				 on the same server beside a WebServer and the firewall
				 grants access to ports 8787 and 9797.
			-->
			<port>8787</port>
			<sslport>9797</sslport>
			<!-- these domains are accepted by the engine listening on the above mentioned port -->
			<domains>
				<domain>*</domain>
			</domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
			<timeout>0</timeout>
			<!-- Jetty provides a WebSocket Servlet, set the context path here -->
			<context>/jWebSocket</context>
			<!-- Jetty provides a WebSocket Servlet, set the servlet path here -->
			<servlet>/jWebSocket</servlet>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
			<maxframesize>1048840</maxframesize>
			<!-- maximun number of connections allowed by this engine -->
			<maxconnections>10000</maxconnections>
		</engine>
		
	</engineDefaults>

	<!-- server types to be instantiated for jWebSocket -->
	<servers>
		<server>
			<name>org.jwebsocket.server.TokenServer</name>
			<id>ts0</id>
			<jar>jWebSocketTokenServer-1.0.jar</jar>
			<!-- define the thread pool properties. Thread are spawned when Token's spawnThread value is true 
			 Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. 
			 If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. 
			 Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.
			 -->
			<threadPool>
				<!--  number of thread that are "waiting" even if the queue is empty  -->
				<corePoolSize>10</corePoolSize>
				<!--  number maximum of thread that can be running at the same time -->
				<maximumPoolSize>100</maximumPoolSize>
				<!--  time before the desctruction of "free" threads (seconds) -->
				<keepAliveTime>60</keepAliveTime>
				<!--  size of the blocking queue. Connection will be refused if the queue is full and the poolsize is equals to the maximumPoolSize -->
				<blockingQueueSize>1000</blockingQueueSize>
			</threadPool>
		</server>
		<server>
			<name>org.jwebsocket.server.CustomServer</name>
			<id>cs0</id>
			<jar>jWebSocketCustomServer-1.0.jar</jar>
		</server>
	</servers>

	<!-- jWebSocket global rights -->
	<rights>
		<!-- configuration of system plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>send</id>
			<description>Send message to a single target client.</description>
		</right>

		<!-- configuration of chat plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.chat</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>

		<!-- configuration of rpc plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>rpc</id>
			<description>Allow Remote Procedure Calls (RPC) to server</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>rrpc</id>
			<description>Allow Reverse Remote Procedure Calls (RRPC) to other clients</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</id>
			<description>A sample RPC demo</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.getRPCObject</id>
			<description>A RPC demo with custom RPC objects as arguments and return values</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runIntDemo(int)</id>
			<description>A demo how to pass integers to unique (i.e. not overloaded) RPC's</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runStringDemo(string)</id>
			<description>A demo how to pass strings to unique (i.e. not overloaded) RPC's</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runListDemo(array)</id>
			<description>A demo how to pass arrays (lists) to unique (i.e. not overloaded) RPC's</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runMapDemo(map)</id>
			<description>A demo how to pass maps to unique (i.e. not overloaded) RPC's</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(int)</id>
			<description>A demo how to call overloaded methods (here with int argument).</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(string)</id>
			<description>A demo how to call overloaded methods (here with string argument).</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(array)</id>
			<description>A demo how to call overloaded methods (here with array argument).</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(map)</id>
			<description>A demo how to call overloaded methods (here with map argument).</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.Messaging.getMyMessages</id>
			<description>Return user's messages'</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</id>
			<description>rpcTest</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</id>
			<description>rpcTest</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</id>
			<description>rpcTest</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</id>
			<description>rpcTest</description>
		</right>

		<right>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<id>org.jwebsocket.rpc.sample.Messaging.getMyMessages</id>
			<description>Return user's messages'</description>
		</right>


		<!-- configuration of jdbc plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>select</id>
			<description>Allow to select from jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>insert</id>
			<description>Allow to insert into jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>delete</id>
			<description>Allow to delete from jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>update</id>
			<description>Allow to update jdbc resources</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>querySQL</id>
			<description>Allow to select from jdbc resources using native SQL</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>updateSQL</id>
			<description>Allow to update/insert/delete jdbc resources using native SQL</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<id>execSQL</id>
			<description>Allow to update database meta data using native SQL</description>
		</right>

		<!-- configuration of jms plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>sendAndListen.queue.testQueue</id>
			<description>send and listen to queue with name: testQueue</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>listen.topic.testTopic</id>
			<description>listen to topic with name: testTopic</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>send.topic.testTopic</id>
			<description>send messages to topic with name: testTopic
			</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>sendAndListen.topic.stockTopic</id>
			<description>send and listen to topic with name: stockTopic</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createConnection</id>
			<description>createConnection</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createSession</id>
			<description>createSession</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createQueue</id>
			<description>createQueue</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createConsumer</id>
			<description>createConsumer</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>rw.test.queue</id>
			<description>read/write</description>
		</right>
		
		<!-- configuration of filesystem plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>load</id>
			<description>Allow to load files from file system (public area)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>save</id>
			<description>Allow to save files to file system (public area)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>send</id>
			<description>Allow to send files from one client to another client</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>getFilelist</id>
			<description>Allow to retrieve file lists from the server</description>
		</right>

		<!-- Caution! Be careful with this right!
				Unauthorized use could stop your server from
				providing its services! -->
		<right>
			<ns>org.jwebsocket.plugins.admin</ns>
			<id>shutdown</id>
			<description>Allow to shutdown the server</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.admin</ns>
			<id>gc</id>
			<description>Allows to start the server's garbage collector</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.admin</ns>
			<id>getConnections</id>
			<description>Allow to retreive current connections</description>
		</right>

		<!-- Channel rights -->
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>start</id>
			<description>Allow to start a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>stop</id>
			<description>Allow to stop a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>suspend</id>
			<description>Allow to suspend a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>resume</id>
			<description>Allow to resume a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>subscribe</id>
			<description>Allow to subscribe to and unsubscribe from a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>publish</id>
			<description>Allow to publish to a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getChannels</id>
			<description>Allow to retrieve the list of available channels</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscribers</id>
			<description>Allow to retrieve the list of scubscribers of a certain channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscriptions</id>
			<description>Allow to retrieve the list of channels the current client subscribed to</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>createChannel</id>
			<description>Allow to create a new channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>removeChannel</id>
			<description>Allow to remove an existing channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>manageSystemChannels</id>
			<description>Allow to manage (create and remove) system channels from clients</description>
		</right>

	</rights>

	<!-- jWebSocket roles -->
	<roles>
		<role>
			<id>Administrator</id>
			<description>Administrators</description>
			<rights>
				<!-- list of rights for "Administrator" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<right>org.jwebsocket.plugins.rpc.rrpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				
				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>
				<right>org.jwebsocket.plugins.jdbc.update</right>
				<right>org.jwebsocket.plugins.jdbc.insert</right>
				<right>org.jwebsocket.plugins.jdbc.delete</right>
				<right>org.jwebsocket.plugins.jdbc.querySQL</right>
				<right>org.jwebsocket.plugins.jdbc.updateSQL</right>
				<right>org.jwebsocket.plugins.jdbc.execSQL</right>

				<!-- JMS rights -->
				<right>org.jwebsocket.plugins.jms.sendAndListen.queue.testQueue</right>
				<right>org.jwebsocket.plugins.jms.listen.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.send.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.sendAndListen.topic.stockTopic</right>
				
				<right>org.jwebsocket.plugins.jms.createSession</right>
				<right>org.jwebsocket.plugins.jms.createConnection</right>
				<right>org.jwebsocket.plugins.jms.createQueue</right>
				<right>org.jwebsocket.plugins.jms.createConsumer</right>
				<right>org.jwebsocket.plugins.jms.rw.test.queue</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>

				<!-- Caution! Be careful with this right!
						Unauthorized use could stop your server from
						providing its services! -->
				<right>org.jwebsocket.plugins.admin.shutdown</right>
				<right>org.jwebsocket.plugins.admin.gc</right>
				<right>org.jwebsocket.plugins.admin.getConnections</right>

				<!-- channel rights -->
				<right>org.jwebsocket.plugins.channels.start</right>
				<right>org.jwebsocket.plugins.channels.stop</right>
				<right>org.jwebsocket.plugins.channels.suspend</right>
				<right>org.jwebsocket.plugins.channels.resume</right>
			</rights>
		</role>
		<role>
			<id>User</id>
			<description>Registered and authenticated users.</description>
			<rights>
				<!-- list of rights for "User" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<right>org.jwebsocket.plugins.rpc.rrpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>

				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>
				<right>org.jwebsocket.plugins.jdbc.querySQL</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>
			</rights>
		</role>
		<role>
			<id>Guest</id>
			<description>Anonymous users (not registered)</description>
			<rights>
				<!-- list of rights for "Guest" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				<right>org.jwebsocket.plugins.chat.broadcast</right>
				<right>org.jwebsocket.plugins.rpc.rpc</right>
				<!-- rights for RPC's consists of the name space for the RPC plug-in plus the class name plus the method -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest2(array, array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1()</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.rrpcTest1(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getMD5</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.getRPCObject</right>
				<!-- configure rights for methods with unique identifiers, optionally including args -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runIntDemo(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runStringDemo</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runListDemo(array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runMapDemo</right>
				<!-- configure individual rights for each overloaded method separately, including args -->
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(int)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(string)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(array)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.SampleRPCLibrary.runOverloadDemo(map)</right>
				<right>org.jwebsocket.plugins.rpc.org.jwebsocket.rpc.sample.Messaging.getMyMessages</right>

				<!-- JDBC rights -->
				<right>org.jwebsocket.plugins.jdbc.select</right>

				<!-- JMS rights -->
				<right>org.jwebsocket.plugins.jms.sendAndListen.queue.testQueue</right>
				<right>org.jwebsocket.plugins.jms.listen.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.send.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.sendAndListen.topic.stockTopic</right>
				
				<right>org.jwebsocket.plugins.jms.createSession</right>
				<right>org.jwebsocket.plugins.jms.createConnection</right>
				<right>org.jwebsocket.plugins.jms.createQueue</right>
				<right>org.jwebsocket.plugins.jms.createConsumer</right>
				<right>org.jwebsocket.plugins.jms.rw.test.queue</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>

				<!-- Channel rights -->
				<right>org.jwebsocket.plugins.channels.subscribe</right>

				<right>org.jwebsocket.plugins.channels.publish</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.getSubscribers</right>
				<right>org.jwebsocket.plugins.channels.getSubscriptions</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.createChannel</right>
				<right>org.jwebsocket.plugins.channels.removeChannel</right>

			</rights>

		</role>
        
	</roles>

	<!-- jWebSocket users -->
	<users>
        
		<user>
			<uuid>000-000-001-2011-07-14-11-32-40-223</uuid>
			<loginname>guest</loginname>
			<firstname>jWebSocket Guest User</firstname>
			<lastname>(Guest Role)</lastname>
			<!-- no password means that the user does not need a password -->
			<password>guest</password>
			<description>jWebSocket Guest User</description>
			<status>1</status>
			<roles>
				<!-- should be restricted in your application! open for demo purposes only! -->
				<role>Guest</role>
			</roles>
		</user>
        
		<user>
			<uuid>000-000-002-2011-07-14-11-33-20-493</uuid>
			<loginname>user</loginname>
			<firstname>jWebSocket Authenticated User</firstname>
			<lastname>(User Role)</lastname>
			<password>user</password>
			<description>jWebSocket Standard User</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
			</roles>
		</user>
        
		<user>
			<uuid>000-000-003-2011-07-14-11-34-17-189</uuid>
			<loginname>root</loginname>
			<firstname>jWebSocket Root User</firstname>
			<lastname>(Administrator Role)</lastname>
			<password>root</password>
			<description>jWebSocket Root User</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
        
		<user>
			<uuid>000-000-004-2011-07-14-11-35-54-871</uuid>
			<loginname>anonymous</loginname>
			<firstname>jWebSocket Anonymous User</firstname>
			<lastname>(Roles to be specified!)</lastname>
			<!-- empty password -->
			<password></password>
			<description>jWebSocket Anonymous User (Specify if anonymous logins should be supported at all in System Plug-in)</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
			<status>1</status>
			<roles>
				<!-- the rights of all roles are merged -->
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
        
	</users>

	<!-- plug-ins to be instantiated for jWebSocket -->
	<plugins>
        
		<!-- the system plug-in, do not remove, mandatory for basic WebsScket communication operations -->
		<plugin>
			<name>org.jwebsocket.plugins.system.SystemPlugIn</name>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>jws.system</id>
			<jar>jWebSocketServer-1.0.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/SystemPlugIn/system.xml</setting>
				
				<!-- specify whether open, close, login, logout events should 
					 be broadcasted per default. To suppress these broadcasts
					 per events turn settings "on" here and optionally suppress
					 them per client command. -->
				<setting key="broadcastOpenEvent">true</setting>
				<setting key="broadcastCloseEvent">true</setting>
				<setting key="broadcastLoginEvent">true</setting>
				<setting key="broadcastLogoutEvent">true</setting>
				<setting key="allowAnonymousLogin">true</setting>
				<!-- this is the user name used for anonymous logins,
					all anonymous users that just connect will get this user 
					name and all roles and rights assigned to this user.
					Hence, be careful with the roles and rights you assign to 
					this user when you set allowAnonymousLogin to true -->
				<setting key="anonymousLoginName">anonymous</setting>
				<setting key="loginNameCaseInsensitive">true</setting>
				<!-- if this flag is set to true all unknown users automatically 
					are anonymous users. This means they required the optional 
					anonymous password and they get the roles and rights from 
					the anonymous user. -->
				<setting key="allowAutoAnonymous">true</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- plug-in to remotely control the server -->
		<plugin>
			<name>org.jwebsocket.plugins.admin.AdminPlugIn</name>
			<id>jws.admin</id>
			<ns>org.jwebsocket.plugins.admin</ns>
			<jar>jWebSocketAdminPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- shall shutting down be allowed from the outside? -->
				<!-- if set to true it will still depend on the right
				     org.jwebsocket.plugins.admin.shutdown -->
				<setting key="allowShutdown">true</setting>
				<!-- Number of days. Show the logs that are in the range of n last days. -->
				<setting key="numberOfDays">30</setting>
			</settings>
		</plugin>

		<!-- FlashBridge-Plug-in to support WebSocket communication on older browsers via flash -->
		<plugin>
			<name>org.jwebsocket.plugins.flashbridge.FlashBridgePlugIn</name>
			<id>jws.flashbridge</id>
			<ns>org.jwebsocket.plugins.flashbridge</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- if you remove this setting the plug-in uses an internal
				     "allow all ports and domains" default crossdomain.xml -->
				<setting key="crossdomain_xml">${JWEBSOCKET_HOME}conf/FlashPlugIn/crossdomain.xml</setting>
			</settings>
		</plugin>

		<!-- jWebSocket Chat PlugIn -->
		<plugin>
			<name>org.jwebsocket.plugins.chat.ChatPlugIn</name>
			<id>jws.chat</id>
			<ns>org.jwebsocket.plugins.chat</ns>
			<jar>jWebSocketChatPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- plug-in for shared objects -->
		<plugin>
			<name>org.jwebsocket.plugins.sharedobjects.SharedObjectsPlugIn</name>
			<id>jws.sharedObjects</id>
			<ns>org.jwebsocket.plugins.sharedobjects</ns>
			<jar>jWebSocketSharedObjectsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- Shared Canvas PlugIn Configuration -->
		<plugin>
			<name>org.jwebsocket.sharedcanvas.SharedCanvasPlugIn</name>
			<ns>org.jwebsocket.plugins.sharedcanvas</ns>
			<id>SharedCanvasPlugIn</id>
			<jar>jWebSocketSharedCanvasPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<!-- plug-in to support various independant streams on the server -->
		<plugin>
			<name>org.jwebsocket.plugins.streaming.StreamingPlugIn</name>
			<id>jws.streaming</id>
			<ns>org.jwebsocket.plugins.streaming</ns>
			<jar>jWebSocketStreamingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- jWebSocket Channel plug-in to communicate via channels -->
		<plugin>
			<name>org.jwebsocket.plugins.channels.ChannelPlugIn</name>
			<id>jws.channels</id>
			<ns>org.jwebsocket.plugins.channels</ns>
			<jar>jWebSocketChannelPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/ChannelPlugIn/channel.xml</setting>
				<!-- config has been moved to channel.xml spring config -->
			</settings>
		</plugin>

		<!-- proxy plug-in to support shared connections on port 80/443 to avoid firewall issues -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.proxy.ProxyPlugIn</name>
			<id>jws.cluster</id>
			<ns>org.jwebsocket.plugins.proxy</ns>
			<jar>jWebSocketProxyPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				< ! - -  specify plug-in settings - - >
				<setting key="from_host">localhost</setting>
				<setting key="from_port">5557</setting>
				<setting key="http_host">localhost</setting>
				<setting key="http_port">8080</setting>
				<setting key="ws_host">localhost</setting>
				<setting key="ws_port">8787</setting>
			</settings>
		</plugin>
		-->
		
		<!-- plug-in to put multiple WebSocket Servers together to a cluster -->
		<plugin>
			<name>org.jwebsocket.plugins.cluster.ClusterPlugIn</name>
			<id>jws.cluster</id>
			<ns>org.jwebsocket.plugins.cluster</ns>
			<jar>jWebSocketClusterPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- specify plug-in settings -->
				<setting key="key">value</setting>
			</settings>
		</plugin>

		<!-- plug-in to track statistic data about the server usage -->
		<!-- Attention! This plug-in requires the statistics filter setting -->
		<plugin>
			<!-- ensure that this plug-in is loaded after the streaming plug-in! -->
			<name>org.jwebsocket.plugins.statistics.StatisticsPlugIn</name>
			<id>jws.statistics</id>
			<ns>org.jwebsocket.plugins.statistics</ns>
			<jar>jWebSocketStatisticsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- plug-in to access SQL databases via WebSockets -->
		<plugin>
			<name>org.jwebsocket.plugins.jdbc.JDBCPlugIn</name>
			<id>jws.jdbc</id>
			<ns>org.jwebsocket.plugins.jdbc</ns>
			<jar>jWebSocketJDBCPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/JDBCPlugIn/jdbc.xml</setting>

				<!-- specify database settings -->
				<setting key="db_driver">com.mysql.jdbc.Driver</setting>
				<setting key="db_url">jdbc:mysql://localhost:3306/ria-db</setting>
				<!-- System user -->
				<setting key="db_sys_usr_id">fffSys</setting>
				<setting key="db_sys_usr_pw">sys_password</setting>
				<!-- Demo user -->
				<setting key="db_demo_user_id">fffDemo</setting>
				<setting key="db_demo_user_pw">demo_password</setting>
				<!-- Application user  -->
				<setting key="db_app_user_id">fffApp</setting>
				<setting key="db_app_user_pw">app_password</setting>
				<!-- connection validity check timeout in ms -->
				<setting key="conn_val_timeout">300</setting>
			</settings>
		</plugin>

		<!-- plug-in for messaging via JMS -->
		<plugin>
			<name>org.jwebsocket.plugins.jms.JMSPlugIn</name>
			<id>jws.jms</id>
			<ns>org.jWebSocket.plugins.jms</ns>
			<jar>jWebSocketJMSPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/JMSPlugIn/jms.xml</setting>
				<setting key="connectionFactory:1" type="json">{name:"connectionFactory"}</setting>
				<setting key="destination:1" type="json">{name:"testQueue",pubSubDomain:false,cfName:"connectionFactory",deliveryPersistent:false}</setting>
				<setting key="destination:2" type="json">{name:"testTopic",pubSubDomain:true,cfName:"connectionFactory",deliveryPersistent:false}</setting>
				<setting key="destination:3" type="json">{name:"stockTopic",pubSubDomain:true,cfName:"connectionFactory",deliveryPersistent:false}</setting>
			</settings>
		</plugin>
		
		
		<!-- plug-in to support server side logging for clients -->
		<!-- THIS PLUG-IN REQUIRES THE JDBC PLUG-IN! -->
		<!-- LOAD JDBC PLUG-IN BEFORE THE LOGGING-PLUG-IN! -->
		<plugin>
			<name>org.jwebsocket.plugins.logging.LoggingPlugIn</name>
			<id>jws.logging</id>
			<ns>org.jwebsocket.plugins.logging</ns>
			<jar>jWebSocketLoggingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/LoggingPlugIn/logging.xml</setting>
				<setting key="implementation">Log4J</setting>
				<setting key="table:name">log</setting>
				<setting key="field:level">level</setting>
				<setting key="field:info">info</setting>
				<setting key="field:message">message</setting>
			</settings>
		</plugin>

		<!-- plug-in to send mails via WebSockets -->
		<plugin>
			<name>org.jwebsocket.plugins.mail.MailPlugIn</name>
			<id>jws.mail</id>
			<ns>org.jwebsocket.plugins.mail</ns>
			<jar>jWebSocketMailPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/MailPlugIn/mail.xml</setting>
			</settings>
		</plugin>

		<!-- plug-in to generate and validate Captchas -->
		<plugin>
			<name>org.jwebsocket.plugins.jcaptcha.JCaptchaPlugIn</name>
			<id>jws.jcaptcha</id>
			<ns>org.jwebsocket.plugins.jcaptcha</ns>
			<jar>jWebSocketJCaptchaPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
			</settings>
		</plugin>

		<!-- plug-in to send mails via WebSockets -->
		<plugin>
			<name>org.jwebsocket.plugins.sms.SMSPlugIn</name>
			<id>jws.sms</id>
			<ns>org.jwebsocket.plugins.sms</ns>
			<jar>jWebSocketSMSPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/SMSPlugIn/sms.xml</setting>
			</settings>
		</plugin>

		<!-- plug-in to access the streaming twitter API -->
		<plugin>
			<name>org.jwebsocket.plugins.twitter.TwitterPlugIn</name>
			<id>jws.twitter</id>
			<ns>org.jwebsocket.plugins.twitter</ns>
			<jar>jWebSocketTwitterPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/TwitterPlugIn/twitter.xml</setting>
			</settings>
		</plugin>

		<!-- plug-in for XMPP/Jabber compatible chats -->
		<plugin>
			<name>org.jwebsocket.plugins.xmpp.XMPPPlugIn</name>
			<id>jws.xmpp</id>
			<ns>org.jwebsocket.plugins.xmpp</ns>
			<jar>jWebSocketXMPPPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/XMPPPlugIn/xmpp.xml</setting>
			</settings>
		</plugin>

		<!-- filesystem plug-in to access server files via WebSockets -->
		<plugin>
			<name>org.jwebsocket.plugins.filesystem.FileSystemPlugIn</name>
			<id>jws.filesystem</id>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<jar>jWebSocketFileSystemPlugIn-1.0.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/FileSystemPlugIn/filesystem.xml</setting>
				<!-- specify folder locations -->
				<!-- examples for pure websocket server w/o an attached web server -->
				<!--
				<setting key="publicDir">%JWEBSOCKET_HOME%/public/</setting>
				<setting key="privateDir">%JWEBSOCKET_HOME%/private/</setting>
				<setting key="webroot">http://jwebsocket.org/</setting>
				-->
				<!-- examples for windows based websocket servers -->
				<setting key="alias:privateDir">c:/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/users/{username}/</setting>
				<setting key="alias:publicDir">c:/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/public/</setting>
				<setting key="alias:webRoot">http://localhost/jwc10/public/</setting>
				<setting key="alias:reportRoot">${JWEBSOCKET_HOME}/reports</setting>
				<!-- examples for Jetty based websocket servers -->
				<!--
				<setting key="alias:privateDir">c:/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/users/{username}/</setting>
				<setting key="alias:publicDir">c:/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/public/</setting>
				<setting key="alias:webroot">http://localhost/jWebSocket/public/</setting>
				-->
				<!-- examples for linux or mac osx based websocket servers -->
				<!--
				<setting key="alias:privateDir">/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/users/{username}/</setting>
				<setting key="alias:publicDir">/svn/jWebSocket/branches/jWebSocket-1.0/jWebSocketClient/web/public/</setting>
				<setting key="alias:webroot">http://localhost/jwc/</setting>
				-->
				<!-- MIME Types -->
				<setting key="mimetype:image/gif">.gif</setting>
				<setting key="mimetype:image/png">.png</setting>
				<setting key="mimetype:image/jpeg">.jpg .jpeg .jpe</setting>
				<setting key="mimetype:image/tiff">.tif .tiff</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- this is a sample for a user plug-in -->
		<plugin>
			<name>org.jwebsocket.plugins.sample.SamplePlugIn</name>
			<id>jws.sample</id>
			<ns>org.jwebsocket.plugins.sample</ns>
			<jar>jWebSocketSamples-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- The plug-in for remote procedure calls -->
		<plugin>
			<name>org.jwebsocket.plugins.rpc.RPCPlugIn</name>
			<id>jws.rpc</id>
			<ns>org.jwebsocket.plugins.rpc</ns>
			<jar>jWebSocketRPCPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- list all jars from %JWEBSOCKET_HOME%/libs or %CLASSPATH% path -->
				<setting key="class:org.jwebsocket.rpc.sample.SampleRPCLibrary">jWebSocketSamples-1.0.jar</setting>
				<setting key="class:org.jwebsocket.rpc.sample.Messaging">jWebSocketSamples-1.0.jar</setting>
			</settings>
		</plugin>

		<!-- Reporting plug-in -->
		<plugin>
			<name>org.jwebsocket.plugins.reporting.ReportingPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.reporting</ns>
			<!-- use the bundle here, this includes the jasper libraries -->
			<jar>jWebSocketReportingPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<!-- folder where the report specs are located -->
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/ReportingPlugIn/reporting.xml</setting>
			</settings>
		</plugin>
		
		<!-- Monitoring plugin -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.monitoring.MonitoringPlugIn</name>
			<ns>monitoringPlugin.pcinfo</ns>
			<id>pcInfo</id>
			<jar>jWebSocketMonitoringPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->
		<!-- API disclosure plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.api.APIPlugIn</name>
			<id>jws.api</id>
			<ns>org.jwebsocket.plugins.api</ns>
			<jar>jWebSocketAPIPlugIn-1.0.jar</jar>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/APIPlugIn/api.xml</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- performance tests plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.test.PerfTestPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.test</ns>
			<jar>jWebSocketTestPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- benchmark plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.benchmark.BenchmarkPlugIn</name>
			<id>jws.benchmark</id>
			<ns>org.jwebsocket.plugins.benchmark</ns>
			<jar>jWebSocketBenchmarkPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- automated tests plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.test.AutomTestPlugIn</name>
			<id>jws.test</id>
			<ns>org.jwebsocket.plugins.test</ns>
			<jar>jWebSocketTestPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<!-- Sencha Demo plugin -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.extjs.ExtJSGridFormDemoPlugin</name>
			<id>jws.extjsdemo</id>
			<ns>jws.ext.gridformdemo</ns>
			<jar>jWebSocketSenchaPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->
		
		<!-- Sencha Demo plugin -->
		<plugin>
			<name>org.jwebsocket.plugins.extjs.ExtJSGridFormDemoPlugin</name>
			<id>ExtJSGridFormDemoPlugin</id>
			<ns>jws.ext.gridformdemo</ns>
			<!-- <name>org.jwebsocket.plugins.extjs.ExtJSDemoPlugin</name> -->
			<!-- <ns>jws.ext.demo</ns> -->
			
			<jar>jWebSocketSenchaPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<!-- JQuery Demo plugin -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.jquery.JQueryPlugIn</name>
			<id>jws.jquery</id>
			<ns>org.jwebsocket.jquery</ns>
			<jar>jWebSocketJQueryPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>		
		-->
		
		<!-- jWeSocket Ping-Pong Game Plug-in -->
		<!--
		<plugin>
			<name>cu.uci.hab.pingpong.plugin.PingPongPlugIn</name>
			<id>jws.user</id>
			<ns>pingpong</ns>
			<jar>jWebSocketPingPongGame-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="sHeight">290</setting>
				<setting key="sWidth">478</setting>
				<setting key="dbHost">localhost</setting>
				<setting key="dbPort">27017</setting>
				<setting key="dbDay">30</setting>
				<setting key="dbTime">1</setting>
			</settings>
		</plugin>
		-->
		
		<plugin>
			<name>org.jwebsocket.plugins.events.EventsPlugIn</name>
			<ns>test</ns>
			<id>jws.events.test</id>
			<jar>jWebSocketEventsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
		<!-- Sample for Java Card -->
		<plugin>
			<name>org.jwebsocket.plugins.events.EventsPlugIn</name>
			<ns>jc</ns>
			<id>jws.jcdemo</id>
			<jar>jWebSocketSamples-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>

		<!-- Arduino Remote Control Plug-in -->
		<!-- 
			This plug-in requires Arduino hardware to be connected and configured.
			This plug-in requires the rxtx lib to be loaded in the libraries section!.
		-->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.events.EventsPlugIn</name>
			<ns>rc</ns>
			<id>jws.rcdemo</id>
			<jar>jWebSocketArduinoPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		-->
		
		<!-- JMX Plug-in -->
		<!--
		<plugin>
			<name>org.jwebsocket.plugins.jmx.JMXPlugIn</name>
			<ns>org.jwebsocket.plugins.jmx</ns>
			<id>jws.jmx</id>
			<jar>jWebSocketJMXPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/JMXPlugIn/jmxPluginConfig.xml</setting>
				<setting key="beans_config">JMXPlugIn/PluginsConfigFiles/</setting>
			</settings>
		</plugin>
		-->
		
	    <!--
		<plugin>
			<name>cu.uci.testjmx.plugins.TestJmxPlugIn</name>
			<ns>cu.uci.testjmx.plugins.testjmxplugin</ns>
			<id>jws.testjmxplugin</id>
			<jar>jTestJMX-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
			<settings>
				<setting key="config_file">/home/lisdey/NetBeansProjects/testPlugins/jTestJMX/conf/beanConfig.xml</setting>
			</settings>
		</plugin>
		-->
    
	</plugins>

	<!-- filters to be instantiated for jWebSocket -->
	<filters>
        
		<filter>
			<name>org.jwebsocket.filters.system.SystemFilter</name>
			<id>jws.sampleFilter</id>
			<ns>org.jwebsocket.filters.system</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>

		<!-- Attention! This filter requires the Statistics Plug-in to be installed -->
		<filter>
			<name>org.jwebsocket.plugins.statistics.StatisticsFilter</name>
			<id>jws.statisticsFilter</id>
			<ns>org.jwebsocket.plugins.statistics</ns>
			<jar>jWebSocketStatisticsPlugIn-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
		
		<filter>
			<name>org.jwebsocket.filters.custom.CustomTokenFilter</name>
			<id>jws.userFilter</id>
			<ns>org.jwebsocket.filters.custom</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
        
		<filter>
			<name>org.jwebsocket.filters.sample.SampleFilter</name>
			<id>jws.sampleFilter</id>
			<ns>org.jwebsocket.filters.sample</ns>
			<jar>jWebSocketSamples-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
        
	</filters>

</jWebSocket>
